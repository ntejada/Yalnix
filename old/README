CHECKPOINT 2:
1. I 'met' the checkpoint. SetKernelBrk is implemented fully, ie. not doing what it should be
doing after VM is enabled. Also TRAP_MEMORY not implemented yet. Due to unknown reasons my
partner has been MIA for the pass few days, so I've only been able to continue and work at the
pace of one person. I hope this can be taken into account when grading and giving feedback on
this checkpoint. I understand what I need to do, I just don't have enough man hours to code things
up at this point. I mostly limited by actual time to put fingers to the keyboard.

2. One weird issue is I'm currently cooking the SP to point to the limit of the kernel stack
but for some reason this results in a segfault. Still segfaults when I point it one address below
the limit, but doesn't when i point it 128 addresses below. Huh??? Am I missing something here?





trap.* - contains the interrupt vector to be given to the hardware at boot time, intializes it,
and all handlers for the associated traps.

process.* - contains the structures and functions necessary for process management. The PCB is defined
here and all relevant kernel calls, including Fork(), Exec(), Wait(), GetPid(), etc will reside here
as well.

lock.* - structures and functions for mutex locks

cvar.* - structures and functions for Mesa-styled conditional variables

pipe.* - piping between processes, all structures and functions will reside here.

util/* - utility data structures: linked lists, queues, dicts, etc

resource.* - will handle the reclaiming of pipes, cvars, and locks
